//CREACION DEL CONTROLADOR @Controller:

package com.modelobasededatos.accessingdatamysql;


import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)

public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
 
  

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewBDClientes (
          
           @RequestParam Integer IdCliente
          , @RequestParam(value = "nombrecomercial", defaultValue = "") String nombrecomercial 
          , @RequestParam(value = "nombrefiscal", defaultValue = "") String nombrefiscal 
          , @RequestParam(value = "dni", defaultValue = "") String dni
          , @RequestParam(value = "direccion", defaultValue = "") String direccion
          , @RequestParam(value = "cp", defaultValue = "") String cp
          , @RequestParam(value = "ciudad", defaultValue = "") String ciudad
          , @RequestParam(value = "provincia", defaultValue = "") String provincia
          , @RequestParam(value = "pais", defaultValue = "") String pais
          , @RequestParam(value = "telefono", defaultValue = "") String telefono
          , @RequestParam(value = "movil", defaultValue = "") String movil
          , @RequestParam(value = "fax", defaultValue = "") String fax
          , @RequestParam(value = "web", defaultValue = "") String web                 
          , @RequestParam(value = "email", defaultValue = "") String email
          , @RequestParam(value = "pago", defaultValue = "") String pago
          
          , @RequestParam(value = "Banco", defaultValue = "") String Banco
          , @RequestParam(value = "descuento", defaultValue = "") Float descuento
          , @RequestParam(value = "IBAN", defaultValue = "") Integer IBAN
          , @RequestParam(value = "BIC", defaultValue = "") Integer BIC
          
          , @RequestParam(value = "sinIVA", defaultValue = "") String sinIVA
          , @RequestParam(value = "RE", defaultValue = "") String RE
          
          , @RequestParam(value = "contacto", defaultValue = "") String contacto) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

 
    
    BDClientes n = new BDClientes();
    n.setIdCliente(IdCliente);
    n.setNombrecomercial(nombrecomercial);
    n.setNombrefiscal(nombrefiscal);
    n.setdni(dni);
    n.setdireccion(direccion);
    n.setcp(cp);
    n.setciudad(ciudad);
    n.setProvincia(provincia);
    n.setPais(pais);
    n.setTelefono(telefono);
    n.setmovil(movil);
    n.setfax(fax);
    n.setweb(web);
    n.setcontacto(contacto);
      n.setEmail(email);
    n.setpago(pago);
    n.setBanco(Banco);
    n.setIBAN(IBAN);
    n.setBIC(BIC);
    n.setsinIVA(sinIVA);
    n.setRE(RE);
    n.setdescuento(descuento);   
    
    
    
    userRepository.save(n);
    
    return "Saved";
    
  }
  


  @GetMapping(path="/all")
  public @ResponseBody Iterable<BDClientes> getAllBDClientes() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
    
    
    
  }
  @GetMapping(path="/buscarpornombrecomercial")
  public @ResponseBody BDClientes Buscarnombrecomercial (
          @RequestParam(value = "nombre", defaultValue = "") String nombre ){
      
      
       BDClientes buscarcliente = new BDClientes();
       BDClientes buscarcliente2 = new BDClientes();

       
       List<BDClientes> l_clientes = (List<BDClientes>) userRepository.findAll();
       l_clientes.forEach((bc2) ->{
            if(bc2.getNombrecomercial().equals(nombre)) 
                {
                    buscarcliente.setIdCliente(bc2.getIdCliente());
                    buscarcliente.setNombrefiscal(bc2.getNombrefiscal());
                    buscarcliente.setNombrecomercial(bc2.getNombrecomercial());
                    buscarcliente.setdireccion(bc2.getdireccion());
                    buscarcliente.setcp(bc2.getcp());
                    buscarcliente.setciudad(bc2.getciudad());
                    buscarcliente.setdni(bc2.getdni());
                    
                }
            });
       
               //if (buscarcliente2.getNombrecomercial().equals(nombrecomercial)){buscarcliente=buscarcliente2});
       return buscarcliente;
       
  }
  
/*     @GetMapping(path="/Buscarcliente")
    public @ResponseBody Iterable<BDClientes> getBuscarclienteBDClientes(@RequestParam(value = "cadenabusqueda", defaultValue = "")String buscarcl) {
        
   return userRepository.
    }  
*/



 /* @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewBDProductos (
          
           @RequestParam Integer IdProducto
          , @RequestParam(value = "nombreproducto", defaultValue = "") String nombreproducto 
          , @RequestParam(value = "precio", defaultValue = "") Float precio 
          , @RequestParam(value = "IVA", defaultValue = "") Float IVA
          , @RequestParam(value = "PVP", defaultValue = "") Float PVP
          , @RequestParam(value = "Descuento", defaultValue = "") Float Descuento
          , @RequestParam(value = "Descripcion", defaultValue = "") String Descripcion) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

 
    
    BDProductos n = new BDProductos();
    n.setIdProducto(IdProducto);
    n.setnombreproducto(nombreproducto);
    n.setprecio(precio);
    n.setIVA(IVA);
    n.setPVP(PVP);
    n.setDescuento(Descuento);
    n.setDescripcion(Descripcion);
     
    
    
    ProductosRepository.save(n);
    
    return "Saved";
    
  }


 @GetMapping(path="/all")
  public @ResponseBody Iterable<BDProductos> getAllBDProductos() {
    // This returns a JSON or XML with the users
    return ProductosRepository.findAll();
  }
*/
}