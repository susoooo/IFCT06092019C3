
package com.modelobasededatos.accessingdatamysql;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/citas") // This means URL's start with /demo (after Application path)


public class CitasController {
@Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private CitasRepository citasRepository;
    private Integer IdBDCitas; 
    @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewBDCitas (
          
           @RequestParam Integer IdCitas
          , @RequestParam(value = "nombre", defaultValue = "") String nombre 
          , @RequestParam(value = "apellidos", defaultValue = "") String apellidos 
          , @RequestParam(value = "DNI", defaultValue = "") String DNI
          ,@RequestParam(value = "Especializacion", defaultValue = "") String Especializacion
          , @RequestParam(value = "Fechadelacita", defaultValue = "") String Fechadelacita)
          
          
          
          
           {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    
    BDCitas n = new BDCitas();
       
    n.setIdCitas(IdBDCitas);
    n.setnombre(nombre);
    n.setapellidos(apellidos);
    n.setDNI(DNI);
    n.setEspecializacion(Especializacion);
    n.setFechadelacita(Fechadelacita);
    
      
    
    
    
    citasRepository.save(n);
        return "Saved";
    
  }
  


  @GetMapping(path="/all")
  public @ResponseBody Iterable<BDCitas> getAllBDCitas() {
    // This returns a JSON or XML with the users
    return citasRepository.findAll();
  }
}

 